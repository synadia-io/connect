// Code generated by github.com/atombender/go-jsonschema, DO NOT EDIT.

package model

import (
	"encoding/json"
	"fmt"
)

type ConnectorPatchRequest struct {
	// The id of the connector to patch
	ConnectorId string `json:"connector_id" yaml:"connector_id" mapstructure:"connector_id"`

	// The JSON merge patch. Refer to https://datatracker.ietf.org/doc/html/rfc7386
	// for details
	Patch string `json:"patch" yaml:"patch" mapstructure:"patch"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *ConnectorPatchRequest) UnmarshalJSON(value []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(value, &raw); err != nil {
		return err
	}
	if _, ok := raw["connector_id"]; raw != nil && !ok {
		return fmt.Errorf("field connector_id in ConnectorPatchRequest: required")
	}
	if _, ok := raw["patch"]; raw != nil && !ok {
		return fmt.Errorf("field patch in ConnectorPatchRequest: required")
	}
	type Plain ConnectorPatchRequest
	var plain Plain
	if err := json.Unmarshal(value, &plain); err != nil {
		return err
	}
	*j = ConnectorPatchRequest(plain)
	return nil
}

type ConnectorPatchResponse struct {
	// The updated connector
	Connector Connector `json:"connector" yaml:"connector" mapstructure:"connector"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *ConnectorPatchResponse) UnmarshalJSON(value []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(value, &raw); err != nil {
		return err
	}
	if _, ok := raw["connector"]; raw != nil && !ok {
		return fmt.Errorf("field connector in ConnectorPatchResponse: required")
	}
	type Plain ConnectorPatchResponse
	var plain Plain
	if err := json.Unmarshal(value, &plain); err != nil {
		return err
	}
	*j = ConnectorPatchResponse(plain)
	return nil
}
