// Code generated by github.com/atombender/go-jsonschema, DO NOT EDIT.

package model

import "encoding/json"
import "fmt"

type ConnectorStatusRequest struct {
	// The id of the connector to get the status for
	ConnectorId string `json:"connector_id" yaml:"connector_id" mapstructure:"connector_id"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *ConnectorStatusRequest) UnmarshalJSON(value []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(value, &raw); err != nil {
		return err
	}
	if _, ok := raw["connector_id"]; raw != nil && !ok {
		return fmt.Errorf("field connector_id in ConnectorStatusRequest: required")
	}
	type Plain ConnectorStatusRequest
	var plain Plain
	if err := json.Unmarshal(value, &plain); err != nil {
		return err
	}
	*j = ConnectorStatusRequest(plain)
	return nil
}

type ConnectorStatusResponse struct {
	// Status corresponds to the JSON schema field "status".
	Status ConnectorStatus `json:"status" yaml:"status" mapstructure:"status"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *ConnectorStatusResponse) UnmarshalJSON(value []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(value, &raw); err != nil {
		return err
	}
	if _, ok := raw["status"]; raw != nil && !ok {
		return fmt.Errorf("field status in ConnectorStatusResponse: required")
	}
	type Plain ConnectorStatusResponse
	var plain Plain
	if err := json.Unmarshal(value, &plain); err != nil {
		return err
	}
	*j = ConnectorStatusResponse(plain)
	return nil
}
