// Code generated by github.com/atombender/go-jsonschema, DO NOT EDIT.

package model

import (
	"encoding/json"
	"fmt"
)

type Secret struct {
	// A description of the secret
	Description string `json:"description" yaml:"description" mapstructure:"description"`

	// The id of the secret
	Id string `json:"id" yaml:"id" mapstructure:"id"`

	// The json representation of the value
	Value string `json:"value" yaml:"value" mapstructure:"value"`
}

type SecretSummary struct {
	// A description of the secret
	Description string `json:"description" yaml:"description" mapstructure:"description"`

	// The id of the secret
	Id string `json:"id" yaml:"id" mapstructure:"id"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *SecretSummary) UnmarshalJSON(value []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(value, &raw); err != nil {
		return err
	}
	if _, ok := raw["description"]; raw != nil && !ok {
		return fmt.Errorf("field description in SecretSummary: required")
	}
	if _, ok := raw["id"]; raw != nil && !ok {
		return fmt.Errorf("field id in SecretSummary: required")
	}
	type Plain SecretSummary
	var plain Plain
	if err := json.Unmarshal(value, &plain); err != nil {
		return err
	}
	*j = SecretSummary(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *Secret) UnmarshalJSON(value []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(value, &raw); err != nil {
		return err
	}
	if _, ok := raw["description"]; raw != nil && !ok {
		return fmt.Errorf("field description in Secret: required")
	}
	if _, ok := raw["id"]; raw != nil && !ok {
		return fmt.Errorf("field id in Secret: required")
	}
	if _, ok := raw["value"]; raw != nil && !ok {
		return fmt.Errorf("field value in Secret: required")
	}
	type Plain Secret
	var plain Plain
	if err := json.Unmarshal(value, &plain); err != nil {
		return err
	}
	*j = Secret(plain)
	return nil
}
