// Code generated by github.com/atombender/go-jsonschema, DO NOT EDIT.

package model

import "encoding/json"
import "fmt"

type ConnectorDeleteRequest struct {
	// The id of the connector to remove
	Id string `json:"id" yaml:"id" mapstructure:"id"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *ConnectorDeleteRequest) UnmarshalJSON(value []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(value, &raw); err != nil {
		return err
	}
	if _, ok := raw["id"]; raw != nil && !ok {
		return fmt.Errorf("field id in ConnectorDeleteRequest: required")
	}
	type Plain ConnectorDeleteRequest
	var plain Plain
	if err := json.Unmarshal(value, &plain); err != nil {
		return err
	}
	*j = ConnectorDeleteRequest(plain)
	return nil
}

type ConnectorDeleteResponse struct {
	// Whether the connector existed
	Existed bool `json:"existed" yaml:"existed" mapstructure:"existed"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *ConnectorDeleteResponse) UnmarshalJSON(value []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(value, &raw); err != nil {
		return err
	}
	if _, ok := raw["existed"]; raw != nil && !ok {
		return fmt.Errorf("field existed in ConnectorDeleteResponse: required")
	}
	type Plain ConnectorDeleteResponse
	var plain Plain
	if err := json.Unmarshal(value, &plain); err != nil {
		return err
	}
	*j = ConnectorDeleteResponse(plain)
	return nil
}
