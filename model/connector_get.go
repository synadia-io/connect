// Code generated by github.com/atombender/go-jsonschema, DO NOT EDIT.

package model

import (
	"encoding/json"
	"fmt"
)

type ConnectorGetRequest struct {
	// The id of the connector to get
	Id string `json:"id" yaml:"id" mapstructure:"id"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *ConnectorGetRequest) UnmarshalJSON(value []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(value, &raw); err != nil {
		return err
	}
	if _, ok := raw["id"]; raw != nil && !ok {
		return fmt.Errorf("field id in ConnectorGetRequest: required")
	}
	type Plain ConnectorGetRequest
	var plain Plain
	if err := json.Unmarshal(value, &plain); err != nil {
		return err
	}
	*j = ConnectorGetRequest(plain)
	return nil
}

type ConnectorGetResponse struct {
	// The connector
	Connector *Connector `json:"connector,omitempty" yaml:"connector,omitempty" mapstructure:"connector,omitempty"`

	// Whether the connector was found
	Found bool `json:"found" yaml:"found" mapstructure:"found"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *ConnectorGetResponse) UnmarshalJSON(value []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(value, &raw); err != nil {
		return err
	}
	if _, ok := raw["found"]; raw != nil && !ok {
		return fmt.Errorf("field found in ConnectorGetResponse: required")
	}
	type Plain ConnectorGetResponse
	var plain Plain
	if err := json.Unmarshal(value, &plain); err != nil {
		return err
	}
	*j = ConnectorGetResponse(plain)
	return nil
}
