  version: '3'

  vars:
    SCP_URL: https://cloud.nas-test.synadia.io/api/core/beta
    ACCOUNT: 2lsqayf1NIFEvVwRdTXlAonrGbO
    VERSION:
      sh: git describe --tags --always --abbrev=0 --match='v[0-9]*.[0-9]*.[0-9]*' 2> /dev/null | sed 's/^.//'
    COMMIT_HASH:
      sh: git rev-parse --short HEAD
    BUILD_DATE:
      sh: date '+%Y-%m-%dT%H:%M:%S'
    LD_FLAGS:
      sh: echo "-X main.Version={{.VERSION}} -X main.CommitHash={{.COMMIT_HASH}} -X main.BuildTimestamp={{.BUILD_DATE}}"

  tasks:
    clean:
      desc: Clean up the project
      cmds:
          - rm -rf target/*

    models:deps:
      cmds:
        - go install github.com/atombender/go-jsonschema@84c8d2b98bf0373873df8a353b122530a7110c70

    models:generate:
      desc: Generate models from local schema
      deps:
        - models:deps
      requires:
        vars:
          - CONNECT_NODE_LOCATION
      cmds:
        - go-jsonschema --struct-name-from-title
          --package model
          --schema-output=io.synadia.connect.v1.model.secret=model/secret.go
          --schema-output=io.synadia.connect.v1.model.secret.summary=model/secret.go
          --schema-output=io.synadia.connect.v1.control.secret.list.request=model/secret_list.go
          --schema-output=io.synadia.connect.v1.control.secret.list.response=model/secret_list.go
          --schema-output=io.synadia.connect.v1.control.secret.delete.request=model/secret_delete.go
          --schema-output=io.synadia.connect.v1.control.secret.delete.response=model/secret_delete.go
          --schema-output=io.synadia.connect.v1.control.secret.set.request=model/secret_set.go
          --schema-output=io.synadia.connect.v1.control.secret.set.response=model/secret_set.go
          --schema-output=io.synadia.connect.v1.library=model/library.go
          --schema-output=io.synadia.connect.v1.model.metrics=model/connector_models.go
          --schema-output=io.synadia.connect.v1.model.nats_config=model/connector_models.go
          --schema-output=io.synadia.connect.v1.model.connector=model/connector_models.go
          --schema-output=io.synadia.connect.v1.model.connector.start.options=model/connector_models.go
          --schema-output=io.synadia.connect.v1.model.connector.summary=model/connector_models.go
          --schema-output=io.synadia.connect.v1.model.connector.instance=model/connector_models.go
          --schema-output=io.synadia.connect.v1.model.connector.instances=model/connector_models.go
          --schema-output=io.synadia.connect.v1.model.connector.status=model/connector_models.go
          --schema-output=io.synadia.connect.v1.model.connector.steps=model/connector_models.go
          --schema-output=io.synadia.connect.v1.model.connector.steps.consumer=model/connector_models.go
          --schema-output=io.synadia.connect.v1.model.connector.steps.producer=model/connector_models.go
          --schema-output=io.synadia.connect.v1.model.connector.steps.source=model/connector_models.go
          --schema-output=io.synadia.connect.v1.model.connector.steps.sink=model/connector_models.go
          --schema-output=io.synadia.connect.v1.model.connector.steps.transformer=model/connector_models.go
          --schema-output=io.synadia.connect.v1.model.connector.steps.transformer.composite=model/connector_models.go
          --schema-output=io.synadia.connect.v1.model.connector.steps.transformer.mapping=model/connector_models.go
          --schema-output=io.synadia.connect.v1.model.connector.steps.transformer.service=model/connector_models.go
          --schema-output=io.synadia.connect.v1.model.connector.steps.transformer.explode=model/connector_models.go
          --schema-output=io.synadia.connect.v1.model.connector.steps.transformer.combine=model/connector_models.go
          --schema-output=io.synadia.connect.v1.control.connector.create.request=model/connector_create.go
          --schema-output=io.synadia.connect.v1.control.connector.create.response=model/connector_create.go
          --schema-output=io.synadia.connect.v1.control.connector.delete.request=model/connector_delete.go
          --schema-output=io.synadia.connect.v1.control.connector.delete.response=model/connector_delete.go
          --schema-output=io.synadia.connect.v1.control.connector.get.request=model/connector_get.go
          --schema-output=io.synadia.connect.v1.control.connector.get.response=model/connector_get.go
          --schema-output=io.synadia.connect.v1.control.connector.list.request=model/connector_list.go
          --schema-output=io.synadia.connect.v1.control.connector.list.response=model/connector_list.go
          --schema-output=io.synadia.connect.v1.control.connector.patch.request=model/connector_patch.go
          --schema-output=io.synadia.connect.v1.control.connector.patch.response=model/connector_patch.go
          --schema-output=io.synadia.connect.v1.control.connector.instances.request=model/connector_instances.go
          --schema-output=io.synadia.connect.v1.control.connector.instances.response=model/connector_instances.go
          --schema-output=io.synadia.connect.v1.control.connector.start.request=model/connector_start.go
          --schema-output=io.synadia.connect.v1.control.connector.start.response=model/connector_start.go
          --schema-output=io.synadia.connect.v1.control.connector.status.request=model/connector_status.go
          --schema-output=io.synadia.connect.v1.control.connector.status.response=model/connector_status.go
          --schema-output=io.synadia.connect.v1.control.connector.stop.request=model/connector_stop.go
          --schema-output=io.synadia.connect.v1.control.connector.stop.response=model/connector_stop.go
          {{.CONNECT_NODE_LOCATION}}/model/schemas/*.schema.json

        - go-jsonschema --struct-name-from-title
          --package model
          --schema-output=io.synadia.connect.v1.library.spec=model/crawler.go
          {{.CONNECT_NODE_LOCATION}}/crawler/v1/*.schema.json

        - go-jsonschema --struct-name-from-title
          --package spec
          --schema-output=io.synadia.connect.v1.spec=spec/spec.go
          --schema-output=io.synadia.connect.v1.spec.connector=spec/connector.go
          --schema-output=io.synadia.connect.v1.spec.connector.steps=spec/connector.go
          --schema-output=io.synadia.connect.v1.spec.connector.steps.consumer=spec/connector.go
          --schema-output=io.synadia.connect.v1.spec.connector.steps.producer=spec/connector.go
          --schema-output=io.synadia.connect.v1.spec.connector.steps.transformer=spec/connector.go
          --schema-output=io.synadia.connect.v1.spec.connector.steps.source=spec/connector.go
          --schema-output=io.synadia.connect.v1.spec.connector.steps.sink=spec/connector.go
          --schema-output=io.synadia.connect.v1.spec.metrics=spec/common.go
          --schema-output=io.synadia.connect.v1.spec.nats_config=spec/common.go
          spec/schemas/*.schema.json

    build:
      generates:
        - target/connect
      env:
        GOOS: "{{.GOOS}}"
        GOARCH: "{{.GOARCH}}"
      cmds:
        - go mod tidy
        - go build -ldflags="{{.LD_FLAGS}}" -o target/connect cmd/connect/*.go

    test:
      cmds:
        - go run github.com/onsi/ginkgo/v2/ginkgo -r -cover --coverpkg=github.com/synadia-io/connect/... --compilers=4

    install:
      deps:
          - build
      cmds:
        - mkdir -p ~/.local/bin
        - cp target/connect ~/.local/bin/connect

    docs:verify:links:
      desc: Verify all documentation links are valid
      cmds:
        - |
          echo "üîç Verifying documentation links..."
          broken_links_file=$(mktemp)
          echo "0" > "$broken_links_file"
          
          # Find all markdown files
          for file in $(find . -name "*.md" -not -path "./target/*"); do
            echo "Checking: $file"
            
            # Extract local markdown links [text](./path.md) or [text](path.md)
            if grep -oE '\[.*\]\(\./[^)]*\.md\)|\[.*\]\([^)]*\.md\)' "$file" 2>/dev/null; then
              grep -oE '\[.*\]\(\./[^)]*\.md\)|\[.*\]\([^)]*\.md\)' "$file" 2>/dev/null | while read -r link; do
                # Extract just the file path from the link
                path=$(echo "$link" | sed -E 's/.*\(([^)]*)\).*/\1/')
                
                # Convert relative path to absolute
                if [[ "$path" == ./* ]]; then
                  # Remove leading ./
                  rel_path="${path#./}"
                  abs_path="$(dirname "$file")/$rel_path"
                elif [[ "$path" == ../* ]]; then
                  abs_path="$(dirname "$file")/$path"
                else
                  abs_path="$(dirname "$file")/$path"
                fi
                
                # Check if file exists
                if [[ ! -f "$abs_path" ]]; then
                  echo "‚ùå Broken link in $file: $path ‚Üí $abs_path"
                  current_count=$(cat "$broken_links_file")
                  echo $((current_count + 1)) > "$broken_links_file"
                fi
              done
            fi
          done
          
          broken_links=$(cat "$broken_links_file")
          rm "$broken_links_file"
          
          if [[ $broken_links -eq 0 ]]; then
            echo "‚úÖ All documentation links are valid!"
          else
            echo "‚ùå Found $broken_links broken links"
            exit 1
          fi