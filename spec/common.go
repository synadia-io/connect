// Code generated by github.com/atombender/go-jsonschema, DO NOT EDIT.

package spec

import (
	"encoding/json"
	"fmt"
)

type NatsConfigSpec struct {
	// Whether authentication is enabled
	AuthEnabled bool `json:"auth_enabled,omitempty" yaml:"auth_enabled,omitempty" mapstructure:"auth_enabled,omitempty"`

	// The JWT token used during authentication. Only applicable if auth_enabled is
	// true
	Jwt *string `json:"jwt,omitempty" yaml:"jwt,omitempty" mapstructure:"jwt,omitempty"`

	// The seed used during authentication. Only applicable if auth_enabled is true
	Seed *string `json:"seed,omitempty" yaml:"seed,omitempty" mapstructure:"seed,omitempty"`

	// The url of the nats server to connect to
	Url string `json:"url" yaml:"url" mapstructure:"url"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *NatsConfigSpec) UnmarshalJSON(value []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(value, &raw); err != nil {
		return err
	}
	if _, ok := raw["url"]; raw != nil && !ok {
		return fmt.Errorf("field url in NatsConfigSpec: required")
	}
	type Plain NatsConfigSpec
	var plain Plain
	if err := json.Unmarshal(value, &plain); err != nil {
		return err
	}
	if v, ok := raw["auth_enabled"]; !ok || v == nil {
		plain.AuthEnabled = false
	}
	*j = NatsConfigSpec(plain)
	return nil
}
