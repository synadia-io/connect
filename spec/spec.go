// Code generated by github.com/atombender/go-jsonschema, DO NOT EDIT.

package spec

import (
	"encoding/json"
	"fmt"
	"reflect"
)

type Spec struct {
	// The spec for the component
	Spec interface{} `json:"spec" yaml:"spec" mapstructure:"spec"`

	// The type of component described in this spec
	Type SpecType `json:"type" yaml:"type" mapstructure:"type"`
}

type SpecType string

const SpecTypeConnector SpecType = "connector"

var enumValues_SpecType = []interface{}{
	"connector",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *SpecType) UnmarshalJSON(value []byte) error {
	var v string
	if err := json.Unmarshal(value, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_SpecType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_SpecType, v)
	}
	*j = SpecType(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *Spec) UnmarshalJSON(value []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(value, &raw); err != nil {
		return err
	}
	if _, ok := raw["spec"]; raw != nil && !ok {
		return fmt.Errorf("field spec in Spec: required")
	}
	if _, ok := raw["type"]; raw != nil && !ok {
		return fmt.Errorf("field type in Spec: required")
	}
	type Plain Spec
	var plain Plain
	if err := json.Unmarshal(value, &plain); err != nil {
		return err
	}
	*j = Spec(plain)
	return nil
}
